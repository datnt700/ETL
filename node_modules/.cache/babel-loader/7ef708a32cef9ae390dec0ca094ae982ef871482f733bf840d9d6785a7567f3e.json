{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Projet/etl/my-app/src/component/BarChartMoyenne.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BarChartMoyenne = ({\n  moyenneProdTop1,\n  moyenneProdTop2,\n  chartProd,\n  chartFab\n}) => {\n  _s();\n  const dateString = ['Janvier 2022', 'Février 2022', 'Mars 2022', 'Avril 2022', 'Mai 2022', 'Juin 2022', 'Juillet 2022', 'Août 2022', 'Septembre 2022', 'Octobre 2022', 'Novembre 2022', 'Decembre 2022', 'Janvier 2023'];\n  const svgProdRef = useRef();\n  const margin = {\n    top: 20,\n    right: 30,\n    bottom: 40,\n    left: 40\n  };\n  const width = 600;\n  const height = 500;\n  const svgFabRef = useRef(null);\n  useEffect(() => {\n    // D3.js code to draw the bar chart\n    if (svgFabRef.current) {\n      const width = 600;\n      const height = 400;\n\n      // Tạo biểu đồ\n      const svg = d3.select(svgFabRef.current).attr('width', width).attr('height', height);\n\n      // Scale cho trục x và trục y\n\n      const xScale = d3.scaleBand().domain(dateString.map(d => d)).range([margin.left, width - margin.right]).padding(0.1);\n      // Thiết lập scale cho trục y\n      const yScale = d3.scaleLinear().domain([0, d3.max(chartFab, d => Object.values(d)[0])]).nice().range([height - margin.bottom, margin.top]);\n\n      // Vẽ các thanh bar\n      svg.selectAll('rect').data(chartFab).enter().append('rect').attr('x', (d, i) => xScale(dateString[i])).attr('y', d => yScale(d)).attr('width', xScale.bandwidth()).attr('height', d => height - yScale(d)).attr('fill', 'steelblue');\n\n      // Vẽ trục x và trục y\n      svg.append('g').attr('transform', `translate(0,${height})`).call(d3.axisBottom(xScale));\n      svg.append('g').call(d3.axisLeft(yScale));\n    }\n  }, [chartFab]);\n  //   useEffect(() => {\n  //     // D3.js code to draw the bar chart\n  //     const svg = d3.select(svgProdRef.current);\n  //     if (!svg.empty()) {\n  //       svg.attr('width', width).attr('height', height);\n\n  //       // Thiết lập scale cho trục x\n  //       const xScale = d3\n  //         .scaleBand()\n  //         .domain(topMagasinByProd.map((d) => Object.keys(d)[0]))\n  //         .range([margin.left, width - margin.right])\n  //         .padding(0.1);\n\n  //       // Thiết lập scale cho trục y\n  //       const yScale = d3\n  //         .scaleLinear()\n  //         .domain([0, d3.max(topMagasinByProd, (d) => Object.values(d)[0])])\n  //         .nice()\n  //         .range([height - margin.bottom, margin.top]);\n\n  //       svg\n  //         .selectAll('rect')\n  //         .data(topMagasinByProd)\n  //         .enter()\n  //         .append('rect')\n  //         .attr('x', (d) => xScale(Object.keys(d)[0]))\n  //         .attr('y', (d) => yScale(Object.values(d)[0]))\n  //         .attr('width', xScale.bandwidth())\n  //         .attr(\n  //           'height',\n  //           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n  //         )\n  //         .attr('fill', 'steelblue');\n\n  //       // Thêm nhãn giá trị bên trong mỗi thanh\n  //       svg\n  //         .selectAll('text')\n  //         .data(topMagasinByProd)\n  //         .enter()\n  //         .append('text')\n  //         .text((d) => Object.values(d)[0])\n  //         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n  //         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n  //         .attr('text-anchor', 'middle')\n  //         .attr('font-size', '14px')\n  //         .attr('fill', 'gray ');\n\n  //       // Dựng trục x\n  //       svg\n  //         .append('g')\n  //         .attr('transform', `translate(0,${height - margin.bottom})`)\n  //         .call(d3.axisBottom(xScale));\n\n  //       // Dựng trục y\n  //       svg\n  //         .append('g')\n  //         .attr('transform', `translate(${margin.left},0)`)\n  //         .call(d3.axisLeft(yScale).ticks(5));\n\n  //       // Đặt tên trục và tiêu đề\n  //       svg\n  //         .append('text')\n  //         .attr('x', width / 2)\n  //         .attr('y', height)\n  //         .text('Key');\n\n  //       svg\n  //         .append('text')\n  //         .attr('x', -height / 2)\n  //         .attr('y', 10)\n  //         .attr('transform', 'rotate(-90)')\n  //         .text('Value');\n  //     }\n  //   }, [topMagasinByProd]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Top Magasin a la plus des fabricants avec lesquels coop\\xE9rer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgFabRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(BarChartMoyenne, \"s0cef9sseQlTeWHJ1jfyf/0mXHQ=\");\n_c = BarChartMoyenne;\nexport default BarChartMoyenne;\nvar _c;\n$RefreshReg$(_c, \"BarChartMoyenne\");","map":{"version":3,"names":["React","useEffect","useRef","d3","Chart","jsxDEV","_jsxDEV","Fragment","_Fragment","BarChartMoyenne","moyenneProdTop1","moyenneProdTop2","chartProd","chartFab","_s","dateString","svgProdRef","margin","top","right","bottom","left","width","height","svgFabRef","current","svg","select","attr","xScale","scaleBand","domain","map","d","range","padding","yScale","scaleLinear","max","Object","values","nice","selectAll","data","enter","append","i","bandwidth","call","axisBottom","axisLeft","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/Projet/etl/my-app/src/component/BarChartMoyenne.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\n\nconst BarChartMoyenne = ({\n  moyenneProdTop1,\n  moyenneProdTop2,\n  chartProd,\n  chartFab,\n}) => {\n  const dateString = [\n    'Janvier 2022',\n    'Février 2022',\n    'Mars 2022',\n    'Avril 2022',\n    'Mai 2022',\n    'Juin 2022',\n    'Juillet 2022',\n    'Août 2022',\n    'Septembre 2022',\n    'Octobre 2022',\n    'Novembre 2022',\n    'Decembre 2022',\n    'Janvier 2023',\n  ];\n  const svgProdRef = useRef();\n\n  const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n\n  const width = 600;\n  const height = 500;\n  const svgFabRef = useRef(null);\n  useEffect(() => {\n    // D3.js code to draw the bar chart\n    if (svgFabRef.current) {\n      const width = 600;\n      const height = 400;\n\n      // Tạo biểu đồ\n      const svg = d3\n        .select(svgFabRef.current)\n        .attr('width', width)\n        .attr('height', height);\n\n      // Scale cho trục x và trục y\n\n      const xScale = d3\n        .scaleBand()\n        .domain(dateString.map((d) => d))\n        .range([margin.left, width - margin.right])\n        .padding(0.1);\n      // Thiết lập scale cho trục y\n      const yScale = d3\n        .scaleLinear()\n        .domain([0, d3.max(chartFab, (d) => Object.values(d)[0])])\n        .nice()\n        .range([height - margin.bottom, margin.top]);\n\n      // Vẽ các thanh bar\n      svg\n        .selectAll('rect')\n        .data(chartFab)\n        .enter()\n        .append('rect')\n        .attr('x', (d, i) => xScale(dateString[i]))\n        .attr('y', (d) => yScale(d))\n        .attr('width', xScale.bandwidth())\n        .attr('height', (d) => height - yScale(d))\n        .attr('fill', 'steelblue');\n\n      // Vẽ trục x và trục y\n      svg\n        .append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(xScale));\n\n      svg.append('g').call(d3.axisLeft(yScale));\n    }\n  }, [chartFab]);\n  //   useEffect(() => {\n  //     // D3.js code to draw the bar chart\n  //     const svg = d3.select(svgProdRef.current);\n  //     if (!svg.empty()) {\n  //       svg.attr('width', width).attr('height', height);\n\n  //       // Thiết lập scale cho trục x\n  //       const xScale = d3\n  //         .scaleBand()\n  //         .domain(topMagasinByProd.map((d) => Object.keys(d)[0]))\n  //         .range([margin.left, width - margin.right])\n  //         .padding(0.1);\n\n  //       // Thiết lập scale cho trục y\n  //       const yScale = d3\n  //         .scaleLinear()\n  //         .domain([0, d3.max(topMagasinByProd, (d) => Object.values(d)[0])])\n  //         .nice()\n  //         .range([height - margin.bottom, margin.top]);\n\n  //       svg\n  //         .selectAll('rect')\n  //         .data(topMagasinByProd)\n  //         .enter()\n  //         .append('rect')\n  //         .attr('x', (d) => xScale(Object.keys(d)[0]))\n  //         .attr('y', (d) => yScale(Object.values(d)[0]))\n  //         .attr('width', xScale.bandwidth())\n  //         .attr(\n  //           'height',\n  //           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n  //         )\n  //         .attr('fill', 'steelblue');\n\n  //       // Thêm nhãn giá trị bên trong mỗi thanh\n  //       svg\n  //         .selectAll('text')\n  //         .data(topMagasinByProd)\n  //         .enter()\n  //         .append('text')\n  //         .text((d) => Object.values(d)[0])\n  //         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n  //         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n  //         .attr('text-anchor', 'middle')\n  //         .attr('font-size', '14px')\n  //         .attr('fill', 'gray ');\n\n  //       // Dựng trục x\n  //       svg\n  //         .append('g')\n  //         .attr('transform', `translate(0,${height - margin.bottom})`)\n  //         .call(d3.axisBottom(xScale));\n\n  //       // Dựng trục y\n  //       svg\n  //         .append('g')\n  //         .attr('transform', `translate(${margin.left},0)`)\n  //         .call(d3.axisLeft(yScale).ticks(5));\n\n  //       // Đặt tên trục và tiêu đề\n  //       svg\n  //         .append('text')\n  //         .attr('x', width / 2)\n  //         .attr('y', height)\n  //         .text('Key');\n\n  //       svg\n  //         .append('text')\n  //         .attr('x', -height / 2)\n  //         .attr('y', 10)\n  //         .attr('transform', 'rotate(-90)')\n  //         .text('Value');\n  //     }\n  //   }, [topMagasinByProd]);\n  return (\n    <>\n      <h4>Top Magasin a la plus des fabricants avec lesquels coopérer</h4>\n      <svg ref={svgFabRef}></svg>\n      {/* <h4>Top Magasin a la plus des produits à vendre</h4>\n\n      <svg ref={svgProdRef}></svg> */}\n    </>\n  );\n};\n\nexport default BarChartMoyenne;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,eAAe,GAAGA,CAAC;EACvBC,eAAe;EACfC,eAAe;EACfC,SAAS;EACTC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,UAAU,GAAG,CACjB,cAAc,EACd,cAAc,EACd,WAAW,EACX,YAAY,EACZ,UAAU,EACV,WAAW,EACX,cAAc,EACd,WAAW,EACX,gBAAgB,EAChB,cAAc,EACd,eAAe,EACf,eAAe,EACf,cAAc,CACf;EACD,MAAMC,UAAU,GAAGd,MAAM,CAAC,CAAC;EAE3B,MAAMe,MAAM,GAAG;IAAEC,GAAG,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,MAAM,EAAE,EAAE;IAAEC,IAAI,EAAE;EAAG,CAAC;EAE3D,MAAMC,KAAK,GAAG,GAAG;EACjB,MAAMC,MAAM,GAAG,GAAG;EAClB,MAAMC,SAAS,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAC9BD,SAAS,CAAC,MAAM;IACd;IACA,IAAIuB,SAAS,CAACC,OAAO,EAAE;MACrB,MAAMH,KAAK,GAAG,GAAG;MACjB,MAAMC,MAAM,GAAG,GAAG;;MAElB;MACA,MAAMG,GAAG,GAAGvB,EAAE,CACXwB,MAAM,CAACH,SAAS,CAACC,OAAO,CAAC,CACzBG,IAAI,CAAC,OAAO,EAAEN,KAAK,CAAC,CACpBM,IAAI,CAAC,QAAQ,EAAEL,MAAM,CAAC;;MAEzB;;MAEA,MAAMM,MAAM,GAAG1B,EAAE,CACd2B,SAAS,CAAC,CAAC,CACXC,MAAM,CAAChB,UAAU,CAACiB,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC,CAAC,CAChCC,KAAK,CAAC,CAACjB,MAAM,CAACI,IAAI,EAAEC,KAAK,GAAGL,MAAM,CAACE,KAAK,CAAC,CAAC,CAC1CgB,OAAO,CAAC,GAAG,CAAC;MACf;MACA,MAAMC,MAAM,GAAGjC,EAAE,CACdkC,WAAW,CAAC,CAAC,CACbN,MAAM,CAAC,CAAC,CAAC,EAAE5B,EAAE,CAACmC,GAAG,CAACzB,QAAQ,EAAGoB,CAAC,IAAKM,MAAM,CAACC,MAAM,CAACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACzDQ,IAAI,CAAC,CAAC,CACNP,KAAK,CAAC,CAACX,MAAM,GAAGN,MAAM,CAACG,MAAM,EAAEH,MAAM,CAACC,GAAG,CAAC,CAAC;;MAE9C;MACAQ,GAAG,CACAgB,SAAS,CAAC,MAAM,CAAC,CACjBC,IAAI,CAAC9B,QAAQ,CAAC,CACd+B,KAAK,CAAC,CAAC,CACPC,MAAM,CAAC,MAAM,CAAC,CACdjB,IAAI,CAAC,GAAG,EAAE,CAACK,CAAC,EAAEa,CAAC,KAAKjB,MAAM,CAACd,UAAU,CAAC+B,CAAC,CAAC,CAAC,CAAC,CAC1ClB,IAAI,CAAC,GAAG,EAAGK,CAAC,IAAKG,MAAM,CAACH,CAAC,CAAC,CAAC,CAC3BL,IAAI,CAAC,OAAO,EAAEC,MAAM,CAACkB,SAAS,CAAC,CAAC,CAAC,CACjCnB,IAAI,CAAC,QAAQ,EAAGK,CAAC,IAAKV,MAAM,GAAGa,MAAM,CAACH,CAAC,CAAC,CAAC,CACzCL,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC;;MAE5B;MACAF,GAAG,CACAmB,MAAM,CAAC,GAAG,CAAC,CACXjB,IAAI,CAAC,WAAW,EAAG,eAAcL,MAAO,GAAE,CAAC,CAC3CyB,IAAI,CAAC7C,EAAE,CAAC8C,UAAU,CAACpB,MAAM,CAAC,CAAC;MAE9BH,GAAG,CAACmB,MAAM,CAAC,GAAG,CAAC,CAACG,IAAI,CAAC7C,EAAE,CAAC+C,QAAQ,CAACd,MAAM,CAAC,CAAC;IAC3C;EACF,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EACd;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,oBACEP,OAAA,CAAAE,SAAA;IAAA2C,QAAA,gBACE7C,OAAA;MAAA6C,QAAA,EAAI;IAA2D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpEjD,OAAA;MAAKkD,GAAG,EAAEhC;IAAU;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eAI3B,CAAC;AAEP,CAAC;AAACzC,EAAA,CA9JIL,eAAe;AAAAgD,EAAA,GAAfhD,eAAe;AAgKrB,eAAeA,eAAe;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}