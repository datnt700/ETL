{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Projet/etl/my-app/src/component/BarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChart = ({\n  data\n}) => {\n  _s();\n  const chartRef = useRef();\n  useEffect(() => {\n    // Lấy tham chiếu đến canvas\n    const ctx = chartRef.current.getContext('2d');\n\n    // Thiết lập dữ liệu biểu đồ\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [{\n        label: 'Value',\n        data: Object.values(data),\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 1\n      }]\n    };\n\n    // Cấu hình biểu đồ\n    const chartOptions = {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    };\n\n    // Vẽ biểu đồ\n    const config = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: chartOptions\n    });\n    let chart;\n    if (chart) {\n      chart.destroy();\n      chart = new Chart(ctx, config);\n    } else {\n      chart = new Chart(ctx, config);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 10\n  }, this);\n};\n_s(BarChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = BarChart;\nexport default BarChart;\n\n// const BarChart = ({ data }) => {\n//   const svgRef = useRef();\n//   const width = 600;\n//   const height = 500;\n//   const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n//   useEffect(() => {\n//     // D3.js code to draw the bar chart\n//     const svg = d3.select(svgRef.current);\n//     if (!svg.empty()) {\n//       svg.attr('width', width).attr('height', height);\n\n//       // Thiết lập scale cho trục x\n//       const xScale = d3\n//         .scaleBand()\n//         .domain(data.map((d) => Object.keys(d)[0]))\n//         .range([margin.left, width - margin.right])\n//         .padding(0.1);\n\n//       // Thiết lập scale cho trục y\n//       const yScale = d3\n//         .scaleLinear()\n//         .domain([0, d3.max(data, (d) => Object.values(d)[0])])\n//         .nice()\n//         .range([height - margin.bottom, margin.top]);\n\n//       svg\n//         .selectAll('rect')\n//         .data(data)\n//         .enter()\n//         .append('rect')\n//         .attr('x', (d) => xScale(Object.keys(d)[0]))\n//         .attr('y', (d) => yScale(Object.values(d)[0]))\n//         .attr('width', xScale.bandwidth())\n//         .attr(\n//           'height',\n//           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n//         )\n//         .attr('fill', 'steelblue');\n\n//       // Thêm nhãn giá trị bên trong mỗi thanh\n//       svg\n//         .selectAll('text')\n//         .data(data)\n//         .enter()\n//         .append('text')\n//         .text((d) => Object.values(d)[0])\n//         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n//         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n//         .attr('text-anchor', 'middle')\n//         .attr('font-size', '14px')\n//         .attr('fill', 'gray ');\n\n//       // Dựng trục x\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(0,${height - margin.bottom})`)\n//         .call(d3.axisBottom(xScale));\n\n//       // Dựng trục y\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(${margin.left},0)`)\n//         .call(d3.axisLeft(yScale).ticks(5));\n\n//       // Đặt tên trục và tiêu đề\n//       svg\n//         .append('text')\n//         .attr('x', width / 2)\n//         .attr('y', height)\n//         .text('Key');\n\n//       svg\n//         .append('text')\n//         .attr('x', -height / 2)\n//         .attr('y', 10)\n//         .attr('transform', 'rotate(-90)')\n//         .text('Value');\n//     }\n//   }, [data]);\n//   return <svg ref={svgRef}></svg>;\n// };\n\n// export default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["React","useEffect","useRef","d3","Chart","jsxDEV","_jsxDEV","BarChart","data","_s","chartRef","ctx","current","getContext","chartData","labels","Object","keys","datasets","label","values","backgroundColor","borderColor","borderWidth","chartOptions","scales","y","beginAtZero","config","type","options","chart","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/Projet/etl/my-app/src/component/BarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\n\nconst BarChart = ({ data }) => {\n  const chartRef = useRef();\n\n  useEffect(() => {\n    // Lấy tham chiếu đến canvas\n    const ctx = chartRef.current.getContext('2d');\n\n    // Thiết lập dữ liệu biểu đồ\n    const chartData = {\n      labels: Object.keys(data),\n      datasets: [\n        {\n          label: 'Value',\n          data: Object.values(data),\n          backgroundColor: 'rgba(75, 192, 192, 0.2)',\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    // Cấu hình biểu đồ\n    const chartOptions = {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    };\n\n    // Vẽ biểu đồ\n    const config = new Chart(ctx, {\n      type: 'bar',\n      data: chartData,\n      options: chartOptions,\n    });\n    let chart;\n    if (chart) {\n      chart.destroy();\n      chart = new Chart(ctx, config);\n    } else {\n      chart = new Chart(ctx, config);\n    }\n  }, [data]);\n  return <canvas ref={chartRef} />;\n};\n\nexport default BarChart;\n\n// const BarChart = ({ data }) => {\n//   const svgRef = useRef();\n//   const width = 600;\n//   const height = 500;\n//   const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n//   useEffect(() => {\n//     // D3.js code to draw the bar chart\n//     const svg = d3.select(svgRef.current);\n//     if (!svg.empty()) {\n//       svg.attr('width', width).attr('height', height);\n\n//       // Thiết lập scale cho trục x\n//       const xScale = d3\n//         .scaleBand()\n//         .domain(data.map((d) => Object.keys(d)[0]))\n//         .range([margin.left, width - margin.right])\n//         .padding(0.1);\n\n//       // Thiết lập scale cho trục y\n//       const yScale = d3\n//         .scaleLinear()\n//         .domain([0, d3.max(data, (d) => Object.values(d)[0])])\n//         .nice()\n//         .range([height - margin.bottom, margin.top]);\n\n//       svg\n//         .selectAll('rect')\n//         .data(data)\n//         .enter()\n//         .append('rect')\n//         .attr('x', (d) => xScale(Object.keys(d)[0]))\n//         .attr('y', (d) => yScale(Object.values(d)[0]))\n//         .attr('width', xScale.bandwidth())\n//         .attr(\n//           'height',\n//           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n//         )\n//         .attr('fill', 'steelblue');\n\n//       // Thêm nhãn giá trị bên trong mỗi thanh\n//       svg\n//         .selectAll('text')\n//         .data(data)\n//         .enter()\n//         .append('text')\n//         .text((d) => Object.values(d)[0])\n//         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n//         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n//         .attr('text-anchor', 'middle')\n//         .attr('font-size', '14px')\n//         .attr('fill', 'gray ');\n\n//       // Dựng trục x\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(0,${height - margin.bottom})`)\n//         .call(d3.axisBottom(xScale));\n\n//       // Dựng trục y\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(${margin.left},0)`)\n//         .call(d3.axisLeft(yScale).ticks(5));\n\n//       // Đặt tên trục và tiêu đề\n//       svg\n//         .append('text')\n//         .attr('x', width / 2)\n//         .attr('y', height)\n//         .text('Key');\n\n//       svg\n//         .append('text')\n//         .attr('x', -height / 2)\n//         .attr('y', 10)\n//         .attr('transform', 'rotate(-90)')\n//         .text('Value');\n//     }\n//   }, [data]);\n//   return <svg ref={svgRef}></svg>;\n// };\n\n// export default BarChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,KAAK,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,QAAQ,GAAGR,MAAM,CAAC,CAAC;EAEzBD,SAAS,CAAC,MAAM;IACd;IACA,MAAMU,GAAG,GAAGD,QAAQ,CAACE,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,MAAMC,SAAS,GAAG;MAChBC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC;MACzBU,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,OAAO;QACdX,IAAI,EAAEQ,MAAM,CAACI,MAAM,CAACZ,IAAI,CAAC;QACzBa,eAAe,EAAE,yBAAyB;QAC1CC,WAAW,EAAE,uBAAuB;QACpCC,WAAW,EAAE;MACf,CAAC;IAEL,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG;MACnBC,MAAM,EAAE;QACNC,CAAC,EAAE;UACDC,WAAW,EAAE;QACf;MACF;IACF,CAAC;;IAED;IACA,MAAMC,MAAM,GAAG,IAAIxB,KAAK,CAACO,GAAG,EAAE;MAC5BkB,IAAI,EAAE,KAAK;MACXrB,IAAI,EAAEM,SAAS;MACfgB,OAAO,EAAEN;IACX,CAAC,CAAC;IACF,IAAIO,KAAK;IACT,IAAIA,KAAK,EAAE;MACTA,KAAK,CAACC,OAAO,CAAC,CAAC;MACfD,KAAK,GAAG,IAAI3B,KAAK,CAACO,GAAG,EAAEiB,MAAM,CAAC;IAChC,CAAC,MAAM;MACLG,KAAK,GAAG,IAAI3B,KAAK,CAACO,GAAG,EAAEiB,MAAM,CAAC;IAChC;EACF,CAAC,EAAE,CAACpB,IAAI,CAAC,CAAC;EACV,oBAAOF,OAAA;IAAQ2B,GAAG,EAAEvB;EAAS;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAAC5B,EAAA,CA7CIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA+Cd,eAAeA,QAAQ;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}