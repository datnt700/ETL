{"ast":null,"code":"var _jsxFileName = \"/Users/user/Desktop/Projet/etl/my-app/src/component/BarChart.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChartView = ({\n  data\n}) => {\n  return /*#__PURE__*/_jsxDEV(BarChart, {\n    width: 600,\n    height: 600,\n    data: data,\n    children: [/*#__PURE__*/_jsxDEV(Bar, {\n      dataKey: Object.values(data),\n      fill: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n      stroke: \"#ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: Object.keys(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n// const BarChart = ({ data }) => {\n//   const chartRef = useRef();\n//   const chartInstance = useRef(null);\n//   useEffect(() => {\n//     if (chartInstance.current) {\n//       // Hủy biểu đồ trước nếu nó tồn tại\n//       chartInstance.current.destroy();\n//     }\n\n//     const ctx = chartRef.current.getContext('2d');\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: Object.keys(data),\n//         datasets: [\n//           {\n//             label: 'Value',\n//             data: Object.values(data),\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1,\n//           },\n//         ],\n//       },\n//       options: {\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [data]);\n\n//   return <canvas ref={chartRef} />;\n// };\n\n// export default BarChart;\n\n// const BarChart = ({ data }) => {\n//   const svgRef = useRef();\n//   const width = 600;\n//   const height = 500;\n//   const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n//   useEffect(() => {\n//     // D3.js code to draw the bar chart\n//     const svg = d3.select(svgRef.current);\n//     if (!svg.empty()) {\n//       svg.attr('width', width).attr('height', height);\n\n//       // Thiết lập scale cho trục x\n//       const xScale = d3\n//         .scaleBand()\n//         .domain(data.map((d) => Object.keys(d)[0]))\n//         .range([margin.left, width - margin.right])\n//         .padding(0.1);\n\n//       // Thiết lập scale cho trục y\n//       const yScale = d3\n//         .scaleLinear()\n//         .domain([0, d3.max(data, (d) => Object.values(d)[0])])\n//         .nice()\n//         .range([height - margin.bottom, margin.top]);\n\n//       svg\n//         .selectAll('rect')\n//         .data(data)\n//         .enter()\n//         .append('rect')\n//         .attr('x', (d) => xScale(Object.keys(d)[0]))\n//         .attr('y', (d) => yScale(Object.values(d)[0]))\n//         .attr('width', xScale.bandwidth())\n//         .attr(\n//           'height',\n//           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n//         )\n//         .attr('fill', 'steelblue');\n\n//       // Thêm nhãn giá trị bên trong mỗi thanh\n//       svg\n//         .selectAll('text')\n//         .data(data)\n//         .enter()\n//         .append('text')\n//         .text((d) => Object.values(d)[0])\n//         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n//         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n//         .attr('text-anchor', 'middle')\n//         .attr('font-size', '14px')\n//         .attr('fill', 'gray ');\n\n//       // Dựng trục x\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(0,${height - margin.bottom})`)\n//         .call(d3.axisBottom(xScale));\n\n//       // Dựng trục y\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(${margin.left},0)`)\n//         .call(d3.axisLeft(yScale).ticks(5));\n\n//       // Đặt tên trục và tiêu đề\n//       svg\n//         .append('text')\n//         .attr('x', width / 2)\n//         .attr('y', height)\n//         .text('Key');\n\n//       svg\n//         .append('text')\n//         .attr('x', -height / 2)\n//         .attr('y', 10)\n//         .attr('transform', 'rotate(-90)')\n//         .text('Value');\n//     }\n//   }, [data]);\n//   return <svg ref={svgRef}></svg>;\n// };\n_c = BarChartView;\nexport default BarChartView;\nvar _c;\n$RefreshReg$(_c, \"BarChartView\");","map":{"version":3,"names":["React","useEffect","useRef","d3","Chart","BarChart","Bar","CartesianGrid","XAxis","YAxis","jsxDEV","_jsxDEV","BarChartView","data","width","height","children","dataKey","Object","values","fill","fileName","_jsxFileName","lineNumber","columnNumber","stroke","keys","_c","$RefreshReg$"],"sources":["/Users/user/Desktop/Projet/etl/my-app/src/component/BarChart.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport Chart from 'chart.js/auto';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis } from 'recharts';\n\nconst BarChartView = ({ data }) => {\n  return (\n    <BarChart width={600} height={600} data={data}>\n      <Bar dataKey={Object.values(data)} fill=\"green\" />\n      <CartesianGrid stroke=\"#ccc\" />\n      <XAxis dataKey={Object.keys(data)} />\n      <YAxis />\n    </BarChart>\n  );\n};\n// const BarChart = ({ data }) => {\n//   const chartRef = useRef();\n//   const chartInstance = useRef(null);\n//   useEffect(() => {\n//     if (chartInstance.current) {\n//       // Hủy biểu đồ trước nếu nó tồn tại\n//       chartInstance.current.destroy();\n//     }\n\n//     const ctx = chartRef.current.getContext('2d');\n//     chartInstance.current = new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: Object.keys(data),\n//         datasets: [\n//           {\n//             label: 'Value',\n//             data: Object.values(data),\n//             backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//             borderColor: 'rgba(75, 192, 192, 1)',\n//             borderWidth: 1,\n//           },\n//         ],\n//       },\n//       options: {\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     });\n//   }, [data]);\n\n//   return <canvas ref={chartRef} />;\n// };\n\n// export default BarChart;\n\n// const BarChart = ({ data }) => {\n//   const svgRef = useRef();\n//   const width = 600;\n//   const height = 500;\n//   const margin = { top: 20, right: 30, bottom: 40, left: 40 };\n//   useEffect(() => {\n//     // D3.js code to draw the bar chart\n//     const svg = d3.select(svgRef.current);\n//     if (!svg.empty()) {\n//       svg.attr('width', width).attr('height', height);\n\n//       // Thiết lập scale cho trục x\n//       const xScale = d3\n//         .scaleBand()\n//         .domain(data.map((d) => Object.keys(d)[0]))\n//         .range([margin.left, width - margin.right])\n//         .padding(0.1);\n\n//       // Thiết lập scale cho trục y\n//       const yScale = d3\n//         .scaleLinear()\n//         .domain([0, d3.max(data, (d) => Object.values(d)[0])])\n//         .nice()\n//         .range([height - margin.bottom, margin.top]);\n\n//       svg\n//         .selectAll('rect')\n//         .data(data)\n//         .enter()\n//         .append('rect')\n//         .attr('x', (d) => xScale(Object.keys(d)[0]))\n//         .attr('y', (d) => yScale(Object.values(d)[0]))\n//         .attr('width', xScale.bandwidth())\n//         .attr(\n//           'height',\n//           (d) => height - margin.bottom - yScale(Object.values(d)[0])\n//         )\n//         .attr('fill', 'steelblue');\n\n//       // Thêm nhãn giá trị bên trong mỗi thanh\n//       svg\n//         .selectAll('text')\n//         .data(data)\n//         .enter()\n//         .append('text')\n//         .text((d) => Object.values(d)[0])\n//         .attr('x', (d, i) => xScale(Object.keys(d)[0]) + xScale.bandwidth() / 2) // Sử dụng chỉ số i để xác định vị trí trên trục x\n//         .attr('y', (d) => yScale(Object.values(d)[0]) - 5)\n//         .attr('text-anchor', 'middle')\n//         .attr('font-size', '14px')\n//         .attr('fill', 'gray ');\n\n//       // Dựng trục x\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(0,${height - margin.bottom})`)\n//         .call(d3.axisBottom(xScale));\n\n//       // Dựng trục y\n//       svg\n//         .append('g')\n//         .attr('transform', `translate(${margin.left},0)`)\n//         .call(d3.axisLeft(yScale).ticks(5));\n\n//       // Đặt tên trục và tiêu đề\n//       svg\n//         .append('text')\n//         .attr('x', width / 2)\n//         .attr('y', height)\n//         .text('Key');\n\n//       svg\n//         .append('text')\n//         .attr('x', -height / 2)\n//         .attr('y', 10)\n//         .attr('transform', 'rotate(-90)')\n//         .text('Value');\n//     }\n//   }, [data]);\n//   return <svg ref={svgRef}></svg>;\n// };\n\nexport default BarChartView;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,KAAKC,EAAE,MAAM,IAAI;AACxB,OAAOC,KAAK,MAAM,eAAe;AACjC,SAASC,QAAQ,EAAEC,GAAG,EAAEC,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EACjC,oBACEF,OAAA,CAACN,QAAQ;IAACS,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAACF,IAAI,EAAEA,IAAK;IAAAG,QAAA,gBAC5CL,OAAA,CAACL,GAAG;MAACW,OAAO,EAAEC,MAAM,CAACC,MAAM,CAACN,IAAI,CAAE;MAACO,IAAI,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClDb,OAAA,CAACJ,aAAa;MAACkB,MAAM,EAAC;IAAM;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC/Bb,OAAA,CAACH,KAAK;MAACS,OAAO,EAAEC,MAAM,CAACQ,IAAI,CAACb,IAAI;IAAE;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACrCb,OAAA,CAACF,KAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEf,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAG,EAAA,GAjIMf,YAAY;AAmIlB,eAAeA,YAAY;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}